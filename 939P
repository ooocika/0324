suspend fun loadContributorsProgress(
  service : GitHubService,
  req: RequestData,
  updateResult:suspend (List<User>, completed: Boolean) -> Unit
  
){
  val repos = service
  .getOrgRepos(req.org)
  .also{logRepos(req,it)}
  .bodyList()

  var allUers = emptyList<User>()
  for((index, repo)in repos withIndex()){
    val users = service.getRepoContributors(req.org, repo.name)
    .also{logUsers(repo, it)}
    .bodyList()

    allUser = (allUsers+users).aggregate()
    updateResults(allUsers, index == repos.lastIndex)
  }
}
//
interface SendChannel<in E>{
  suspend fun send(element: E)
  fun close(): Boolean
}

interface ReceiveChannel<out E>{
  suspend fun receive(): E

}

interface Channel<E> , ReceiveChannel<E>
  //
  val rendezvousChannel = Channel<String>()
  val bufferedChannel = Channel<String>(10)
  val conflatedChannel = Channel<String>(CONFLATED)
  val unlimitedChannel = Channel <String>(UNLIMITED)

  //
  fun main() = runBlocking<Unit>{
    val channel = Channel<String>()
    launch{
      channel.send("A1")
      channel.send("A2")
      log.("A done")
    }

    launch{
      channel.send("B1")
      log("B done")
    }
    launch{
      repeat(3){
        val x = channel.receive()
        log(x)
      }
      
    }
  }
  fun log(message:Any?){
    println("[${Thread.currentThread().name}] $ message")
  }
  //
  val channel = Channel<List<User>>()
  for(repo in repos){
    launch{
      val user = TODO()

      channel.send(users)
    }
  }
  repeat(repos.size){
    val users = channel.receive()
  }
  //
   suspend fun loadContributorsChannels(
     service: GitHubService,
     req: REquestData,
     updateResults: suspend(List<USer>, completed: Boolean) -> Unit
     
   )  = coroutineScope{

     val repos = service
     .getOrgRepos(req.org)
     .also{logRepos(req, it)}
     .bodyList()

     val channel = Channel<List<User>>()
     for(repo in repos){
       launch{
         val users = service.getRepoContributors(req.org, repo.name)
         .also{logUsers(repo, it)}
         .bodyList()
         channel.send(users)
         
       }
     }
     var allUsers = emptyList<User>()
     repeat(repos.size){
       val users = channel.receive()
       allUsers = (allUsers + users).aggregate()
       updateResults(allUsers, it ==repos.lastIndex )
     }
   }
   //
   @Test
   fun testDelayInSuspend() = runTest{
     val realStartTime = System.currentTimeMills()
     val virtualStartTime = currentTime

     foo()
     println("${System.currentTimeMillis() - realStartTime} ms")
    println("${currentTime - virtualStartTime}ms")
   
   }
   suspend fun foo(){
     delay(1000)
     println("foo")
   }
   //
   @Test
   fun testDelayInLaunch() = runTest{
     val realStartTime  = System.currentTimeMillis()
    var virtualStartTime = currentTime

     bar()

     println("${System.currentTimeMillis() - realStartTime} ms")
     println("${currentTime - virtualStartTime} ms")
     
   }
   suspend fun bar() = coroutineScope{
     launch{
       delay(1000)
       println("bar")
     }
   }
   //
   compileTestKotlin{
     kotlinOptions{
       freeCompilerArgs +="-Xuse - experimental=kotlin.Experimental"
     }
   }
   //
   @Test
   fun test() = runTest{
     val startTime = currentTime

     val totalTime = currentTime - startTime
   }
   //
   fun testConcurrent()  =runTest{
     val startTime = currentTime
     val result = loadContributorsConcurrnet(MockGithubService, testRequestData)
     Assert.assertEquals("Wrong result for 'loadContributorsConcurrent'", expectedConcurrentResults.users,result)
     val totalTime = currentTime  - startTime

     Assert.assertEquals(
       "The calls run concurrently so the total virtual time should be 2200 ms:" + "1000 for repos request plus max(1000, 1200, 800) = 1200 for concurrent contributors requests)",
       expectedConcurrentResults.timeFromStart, totalTime
     )
   }
   //
   fun testChannels() = runTest{
     val startTime = currentTime
     var index = 0
     loadContributorsChannels(MockGitHubService, testRequestData){users, - -> val expected = concurrentProgressResults[index++]
     val time = currentTime - startTime
       Assert.assertEquals(
         "Expected intermediate results after ${expected.timeFromStart} ms:",
         expected.timeFromStart. time
       )
       Assert.assertEquals("Wrong intermediate results after $time: " ,
                          expected.users, users)
     }
   }
   //
   fun main() = run Blocking{
     val job = launch{
       repeat(1000) { i -> 
       println("job: I'm sleeping $i...")}
     delay(500L)
     }
   }
   delay(1300L)
   println("main: I'm tired of waiting!")
   job.cancel()
   job.join()
   println("main: Now I can quit")
}
//
   fun main() = run Blocking{

     val startTime = System.currentTimeMillis()
     
     val job = launch(Dispatcher.Default){
       var nextPrintTime = startTime
       var i  =0
       while(i < 5){
         if(System.currentTimeMillis() > = nextPrintTime){
           println("job: I'm sleeping ${i++}...")
           nextPrintTime += 500L
         }
       }
     }
   delay(1300L)
   println("main: I'm tired of waiting!")
   job.cancelAndJoin()
   println("main: Now I can quit")
}
   //





    fun main() = run Blocking{

      

        val job = launch(Dispatcher.Default){
          repeat(5) {i ->
          try{
            println("job: I'm sleeping $i ...")
            delay(500)
          }catch(e:Exception){
            println(e)
          }
          }
        }
      
      delay(1300L)
      println("main: I'm tired of waiting!")
      job.cancelAndJoin()
      println("main: Now I can quit")
   }
    //
     fun main() = run Blocking{

         val startTime = System.currentTimeMillis()
         val job = launch(Dispatcher.Default){
           var nextPrintTime = startTime
           var i  =0
           while(isActive){
             
             if(System.currentTimeMillis() > = nextPrintTime){
               println("job: I'm sleeping ${i++}...")
               nextPrintTime += 500L
             }
           }
         }
       delay(1300L)
       println("main: I'm tired of waiting!")
       job.cancelAndJoin()
       println("main: Now I can quit")
    }
     //
fun main() = run Blocking{

      val job = launch{
     
        try{
          println("job: I'm sleeping $i ...")
          delay(500L)
        }
      }
  finally{
          println("job: I'm running finally")
        }
        
      }

    delay(1300L)
    println("main: I'm tired of waiting!")
    job.cancelAndJoin()
    println("main: Now I can quit")
 }
 //
 fun main() = run Blocking{

       val job = launch{

         try{
           repeat(1000){
             i -> println("job: I'm sleeping $i ...")
           delay(500L)
         }
       }finally{
           withContext(NonCancellable){
             
   
           println("job: I'm running finally")
           delay(1000L)
           println("job: And I've just delayed for 1sec because I'm non-cancellable")
         }

       }}
       

     delay(1300L)
     println("main: I'm tired of waiting!")
     job.cancelAndJoin()
     println("main: Now I can quit")
  }
 //
 fun main() = runBlocking{

   withTimeout(1300L)
   {
     repeat(1000){i ->
     println("i'm sleeping $1..")}
     delay(500L)
   }
 }
}
//
 fun main() = runBlocking{

   val result = withTimeoutOrNull(1300L){
     repeat(1000){i ->  println("i'm sleeping $1..")
     
     delay(500L)
   }
     "Done"
 }
   println("Result is $result")
}
 //
 var acquired = 0

class Resource{
  init {acquired++}
  fun close(){acquire--}
}
fun main(){
  runBlocking{
    repeat(10_000){
      launch{
        val resource =withTimeout(60){
          delay(50)
          Resource()
        }
        resource.close()
      }
    }
  }  
  println(acquired)
}
//
class Resource{
  init{acquired++}
  fun close(){ acquired--
    
  }

  fun main(){
    runBlocking{
      repeat(10_000){
        launch{
          var resource:Resource? = nulltry{
            withTimeout(60){
              delay(50)
              resource = Resource()
            }
            
          }finally{
            resource?.close()
          }
        }
      }
    }
    println(acquired)
  }
}
//
suspend fun doSomethingUsefulOne(): Int{
  delay(1000L)
  return 13
  
}
suspend fun doSomethingUsefulTwo(): Int{
  delay(1000L)
  return 29

}
//

fun main() = runBlockin<Unit> {
  val time = measureTimeMillis{
    val one = doSomethingUsefulOne()
     val one = doSomethingUsefulTwo()
  println("The answer is ${one+two}")
  }
  println("Completed in $time ms")
}


suspend fun doSomethingUsefulOne(): Int{
  delay(1000L)
  return 13

}suspend fun doSomethingUsefulTwo(): Int{
  delay(1000L)
  return 29

}
//
fun main() = runBlockin<Unit> {
  val time = measureTimeMillis{
    
    val one = doSomethingUsefulOne()
     val one = doSomethingUsefulTwo()

     
  println("The answer is ${one.await() + two.await()}")
  }
  println("Completed in $time ms")
}



suspend fun doSomethingUsefulOne(): Int{
  delay(1000L)
  return 13

}suspend fun doSomethingUsefulTwo(): Int{
  delay(1000L)
  return 29

}
//
fun main() = runBlockin<Unit> {
  
  val time = measureTimeMillis{
    
    val one = async(start = CoroutineStart.LAZY){doSomethingUsefulOne()}
     val two = async(start = CoroutineStart.LAZY){doSomethingUsefulTWo()}

one.start()
two.start()


    println("The answer is ${one.await() + two.await()}")
  }
  println("Completed in $time ms")
}


suspend fun doSomethingUsefulOne(): Int{
  delay(1000L)
  return 13

}suspend fun doSomethingUsefulTwo(): Int{
  delay(1000L)
  return 29

}
//

@OptIn(DelicateCoroutinesApi::class)
fun somethingUsefulOneAsync() = GlobalScope.async{
  doSomethingUsefulOne()
}

@OptIn(DelicateCoroutinesApi::class)
fun somethingUsefulTwoAsync() = GlobalScope.async{
  doSomethingUsefulTwo()
}
//
fun main(){
  val time = measureTimeMillis{
    val one  = somethingUsefulOneAsync()
    val two  = somethingUsefultwoAsync()

    runBlocking{
      println("The answer is ${one.await() + two.await()}")
    }
  }
  println("Completed in $time ms")
}

@OptIn(DelicateCoroutinesApi::class)
fun somethingUsefulOneAsync() = GlobalScope.async{
  doSomethingUsefulOne()
}

@OptIn(DelicateCoroutinesApi::class)
fun somethingUsefulTwoAsync() = GlobalScope.async{
  doSomethingUsefulTwo()
}
suspend fun doSomethingUsefulOne(): Int{
  delay(1000L)
  return 13
}
suspend fun doSomethingusefulTwo(): Int{
  delay(1000L)
  return 29
}
//
suspend fun concurrentSum(): Int = coroutineScope{
  val one = async{doSomethingUsefulOne()}
   val Two = async{doSomethingUsefulTwo()}
  one.await() + two.await()
}
//
fun main() = runBlocking<Unit>{
  val time = measureTimeMillis{
    println("The answer is ${concurrentSum()")
  }
  println("Completed in $time ms")
}
suspend fun concurrentSum(): Int = coroutineScope{
  val one = async{doSomethingUsefulOne()}
   val Two = async{doSomethingUsefulTwo()}
  one.await() + two.await()
}

suspend fun doSomethingUsefulOne(): Int{
  delay(1000L)
  return 13
}
suspend fun doSomethingUsefulTwo(): Int{
  delay(1000L)
  return 29
}
//
fun main() = runBlocking<Unit>{
  try{
    failedConcurrentSum()
    
  }catch(e:ArithmeticException){
    println("Computation failed with ArithmeticException")
  }
}
suspend fun failedConcurrentSum(): Int = coroutineScope{
  val one = async<Int>{
    try{
      delay(Long.Max_VALUE)
      42
      
    }finally{println("First child was cancelled")}
  }
}
val two = async<Int>{
  println("Second child throws an exception")
  throw ArithmeticException()
}
one.await()+ two.await()
}
//
fun main() = runBlocking<Unit>{
  launch{
    println("main runBlocking : I'm working in thread ${Thread.currentThread().name}")
    
  }
  launch(Dispatchers.Unconfined){
    println("Unconfined           : I'm working in thread $ {Thread.currentThread().name}")
  }
  launch(Dispatchers.Default){
    println("Default           : I'm working in thread $ {Thread.currentThread().name}")
  }

  
  launch(newSingleThreadContext("MyOwnThread")){
    println("newSingleThreadContext: I'm working in thread ${Thread.currentThread().name"}
            }
            
}
//
fun main() = runBlocking<Unit>{
  launch(Dispatchers.Unconfined){
    println("Unconfined  : I'm working in thread $ {Thread.currentThread().name}")
    delay(500)
    println("Unconfined  :After delay in thread $ {Thread.currentThread().name}")
}
  launch{
     println("main runBlocking : I'm working in thread ${Thread.currentThread().name}")
     delay(1000)
      println("main runBlocking : After delay in thread ${Thread.currentThread().name}")
  }
}
//
fun log(msg:String) = println("${Thread.currentThread().name}] $msg")

fun main() = runBlocking<Unit>{
  val a = async{
    log("I'm computing a piece of the answer")
    6
    
  }
  val b = async{
    log("i'm computing another piece of the answer")
    7
  }
  log("The anwser is ${a.await() * b.await()")
}
//
fun log(msg : String) = println("[${Thread.currentThread().name}] $msg")

fun main(){
  newSingleThreadContext("Ctx1").use{ctx1 ->
  newSingleThreadContext("Ctx2").use{ctx2 ->
  runBlocking(ctx1){
    log("Started in ctx1")
    withContext(ctx2){
      log("Working in ctx2")
    }
    log("Back to ctx1")
  }}}
}
//
fun main() = runBlocking<Unit>{
  println("My job is ${coroutineContext[Job]}")
}
//
fun main() =runBlocking<Unit>{
  val request = launch{
    launch(Job()){
      println("job1: I run in my own Job and execute independently!")
   delay(1000)
   println("job1: I am not affected by cancellation of the request")
    }
    launch{
      delay(100)
      println("job2: I am child of the request coroutine")
      delay(1000)
      println("job2: i will not execute this line if my parent request is cancelled")
    
    }
  }
  delay(500)
  request.cancel()
  println("main: Who has survived request cancellation?")
  delay(1000)
}
//
            fun main() =runBlocking<Unit>{
              val request = launch{
                repeat(3) {i -> 
                launch{
                  delay((i + 1) * 200L)
                  println("Coroutine $i is done")
                }}
                println("request: I'm done and I don't explicitly join my children that are still active")
              }
              request.join()
              println("Now processing of the request is complete")
            }
            //
            fun log(msg: String) = println("[$Thread.currentThread().name] $msg")

            fun main() = runBlocking(CoroutineName("main")){
              log("Started main coroutine")
              val v1 = async(CoroutineName("v1coroutine")){
                delay(500)
                log("Computing v1")
                252
              }
              val v2 = async(CoroutineName("v2coroutine")){
                delay(1000)
                log("Computing v2")
                6
                
              }
              log("The answer for v1 / v2 = ${v1.await() / v2.await()}")
            }
            //
            fun main() = run Blocking<Unit>{
              launch(Dispatchers.Default +CoroutineName("test")){
                println("I'm working in thread ${Thread.currentThread().name}")
              }
            }
            //
            class Activity{
              private val mainScope = MainScope()

              fun destory(){
                mainScope.cancel()
              }
              fun doSomething(){
                repeat(10) {i -> 
                mainScope.launch{
                  delay((i+1)* 200L)

                  println("Coroutine $i is done")
                }}
              }
            }
            //
            class Activity{
              private val mainScope = CoroutineScope(Dispatcher.Default)

              fun destory(){
                mainScope.cancel()
              }
              fun doSomething(){
                repeat(10){i -> 
                mainScope.launch{
                  delay((i+1)*200L)
                println("Coroutine $i is done")
                
                }}
              }
            }

            fun main() =runBlocking<Unit>{
              val activity =Activity()
              activity.doSomething()
              println("Launched coroutines")
              delay(500L)
              println("Destorying activity!")
              activity.destory()
              delay(1000)
            }
            //
            val threadLocal = ThreadLocal<String?>()
            
            fun main() = runBlocking<Unit>
        {
          threadLocal.set("main")
          println("Pre-main, current thread: ${Thread.currentThread()}, thread local value: '${threadLocal.get()}'")
          val job = launch(Dispatchers.Default + threadLocal.asContextElement(value = "launch")){

            println("Launch start, current thread: ${Thread.currentThread()}, thread local value: '${threadLocal.get()}'")
            yield()
            println("After yield, current thread: ${Thread.currentThread()}, thread local value: '${threadLocal.get()}' ")
          }
          job.join()
          println("Post-main, current thread: ${Thread.currentThread()}, thread local value : '$threadLocal.get()'")
        }
        //
        
        fun simple(): List<Int> = listOf(1,2,3)

        fun main(){
          simple().forEach{value -> println(value)}
        }
        //
        fun simple(): Sequence<Int> = sequence{
          for(i in 1..3)
          {
            Thread.sleep(100)
            yield(i)
          }
        }
        fun main(){
          simple().forEach{value -> println(value)}
        }
        //
        suspend fun simple(): List<Int>
        {
          delay (1000)
          return listOf(1,2,3)
          
        }
        fun main() = runBlocking<Unit>{
          simple().forEach{value -> println(value)}
        }
        //
        fun simple (): Flow<Int> = flow{
          for(i in 1..3){
            delay(100)

            emit(i)
          }
        }
        fun main() = runBlocking<Unit>{
          launch{
            for(k in 1..3){
              println("I'm not blocked $k")
              delay(100)
              
            }
          }
          simple().collect{value -> println(value)}
        }
        //
        fun simple(): Flow<Int> = flow{
          println("Flow started"
                 )
          for(i in 1..3){
            delay(100)
            emit(i)
          }
        }

        fun main() = runBlocking<Unit>{
          println("Calling simple function..")
          val flow = simple()
          println("Calling collect..")
        flow.collect{value -> println(value)}
        println("Calling collect again..")
        flow.collect{value -> println(value)}
        }
        //
        fun simple(): Flow<Int> = flow{
          for(i in 1..3){
            delay(100)
            println("Emitting $i")
            emit(i)
          }
        }

        fun main() = runBlocking<Unit>
        {
          withTimeoutOrNull(250)
          simple().collect{value -> println(value)}
        }
        println("Done")
            }
            fun main() = runBlocking<Unit>
        {

          (1..3).asFlow().collect{value -> println(value)}
        }
        //
        suspend fun performRequest(request: Int): String{
          delay(1000)
          return "response $request"
        }

        fun main() = runBlocking<Unit>
        {
          (1..3).asFlow()
          .map{request -> performRequest(request)}
          .collect{response -> println(response)}
        }
        //
        suspend fun performRequest(request: Int): String{
          delay(1000)
          return "response $request"
          
        }

        fun main() = runBlocking<Unit>{
          (1..3).asFlow()
          .transform{request -> 
          emit ("Marking request $request")
          emit(performRequest(request))
          }
          .collect{response -> println(response)}
        }
        //
        fun numbers(): Flow<Int> - flow{
          try{
            emit(1)
            emit(2)
            println("this line will execute")
          emit(3)
          }finally{
            println("Finally in numbers")
          }
        }
        fun main() = runBlocking<Unit>{
          numbers()
          .take(2)
          .collect{value -> println(value)})
        }
        //
        fun main() = runBlocking<Unit>{
          val sum = (1..5).asFlow()
          .map{it*it}
          .reduce{a,b -> a+b}
          println(sum)
        }
        //
        fun main() = runBlocking<Unit>{
          (1..5).asFlow()
          .filter{
            println("Filter $it")
            it % 2==0
          }
          .map{
            println("Map $it")
            "string $it"
          }.collect{
            println("Collect $it")
          }
        }
        //
        fun log(msg: String) = println("[${Thread.currentThread().name}] $msg")

        fun simple(): Flow<Int> = flow{
          log("Started simple flow")
          for(i in 1..3)
          emit(i)
        }
            }
            fun main() = runBlocking<UNit>{
              simple().collect{value -> log("Collected $value")}
            }
            //
            fun simple(): Flow<Int> = flow{
              kotlinx.coroutines.withContext(Dispatcher.Default){
                for(i in 1..3){
                  Thread.sleep(100)
                  emit(i)
                }
              }
            }
            fun main() = runBlocking<UNit>{
              simple().collect{value -> println(value
                                               )}
            }
            //
            fun log(msg: String) = println("[$Thread.currentThread().name}] $msg")

  fun simple(): Flow<Int> = flow{
    for(i in 1..3){
      Thread.sleep(100)
      log("Emitting $i")
      emit(i)
      
    }
    
  }.flowOn(Dispatchers.Default)

  fun main() = runBlocking<Unit>
        {
          simple().collect{value -> 
          log("Collected $value")}
        }
        //
        fun simple(): Flow<Int> = flow{
          for(i in 1..3){
            delay(100)
            emit(i)
            
            }
        }

        fun main()  = runBlocking<Unit>{
          val time = measureTimeMillis{
            simple().collect{value -> 
            delay(300)
            println(value)
            }
          }
          println("Collected in $time ms")
        }
        //
        fun simple(): Flow<Int> = flow{
          for(i in 1..3){
            delay(100)
            emit(i)
          }
        }
        fun main() = runBlocking<Unit>{
          val time = measureTimeMillis{
            simple()
            .buffer()
            .collect{value -> 
            delay(300)
            
            println(value)}
          }
          println("Collected in $item ms")
        }
        //
        fun simple(): Flow<Int> = flow{
          for(i in 1..3){
            delay(100)
            emit(i)
          }
        }
        fun main() = measureTimeMillis{{
          simple()
          .conflate()
          .collect{value -> 
          delay(300)
          
          println(value)
          }
        }
          println("Collected in $time ms")
        }
        //
        fun simple(): Flow<Int> = flow{
          for(i in 1..3){
            delay(100)
            emit(i)
            
          }
        }

        fun main() = runBlocking<Unit>{
          val time = measureTimeMillis{
            simple()
            .collectLatest{value -> 
            println("Collecting $value")
            delay(300)
            println("Done $value")
            }
          }
          println("Collected in $time ms")
        }
        //
        fun main() = runBlocking<Unit>{
          val nums = (1..3).asFlow()
          val strs = flowOf("one","two","three")
        nums.zip(strs) {a,b -> "$a -> $b"
        }
        .collect{println(it)}
      }
        //
        fun main() = runBlocking<UNit>{
          val nums = (1..3).asFlow().onEach{delay (300)}
          val strs = flowOf("one","two","three").onEach{delay(400)}
          val startTime = System.currentTimeMillis()
          nums.zip(strs) {a,b -> "$a -> $b"}
          .collect{value -> }
        println("$value at $ {System.currentTimeMillis() - startTime} ms from start")
        }}
        //

        fun main() = runBlocking<UNit>{
          val nums = (1..3).asFlow().onEach{delay (300)}
          val strs = flowOf("one","two","three").onEach{delay(400)}
          val startTime = System.currentTimeMillis()
          
          nums.combine(strs) {a,b -> "$a -> $b"}
          .collect{value -> }
        println("$value at $ {System.currentTimeMillis() - startTime} ms from start")
        }}
        //
        fun requestFlow(i: Int): Flow<String> = flow{
          emit("$i: First")
          delay(500)
          emit("$i : Second")
        }
        //
        (1..3).asFlow().map{requestFlow(it)}
        //
        fun requestFlow(i: Int): Flow<String> = flow{
          emit("$i: First")
          delay(500)
          emit("$i : Second")
        }

        fun main() = runBlocking<UNit>{
          val startTIme = System.currentTimeMillis()
          (1..3).asFlow().onEach{delay(100)}
          .flatMapConcat{requestFlow(it)}
          .collect{value -> 
          println("$value at ${System.currentTimeMillis() - startTime} ms from start")}
        }
        

        //
        fun requstFlow(i: Int): Flow<String> = flow{
          emit("$i : First")
          delay(500)
          emit("$i : Second")
        }
        fun main() = runBlocking<Unit>{
          val startTime = System.currentTimeMillis()
          (1..3).asFlow().onEach{delay(100)}

          .flatMapMerge(requestFlow(it)}
          .collect{value -> 
          println("$value at ${SYstem.currentTImeMillis() - startTime} ms from start")}
        }
        //
        939P
